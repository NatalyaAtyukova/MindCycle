package com.vpn.mindcycle.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.List
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.window.Dialog
import com.vpn.mindcycle.data.model.CyclePhase
import com.vpn.mindcycle.data.model.MoodEntry
import com.vpn.mindcycle.data.model.MoodLevel
import org.threeten.bp.DayOfWeek
import org.threeten.bp.LocalDate
import org.threeten.bp.YearMonth
import org.threeten.bp.format.TextStyle
import org.threeten.bp.format.DateTimeFormatter
import java.util.*

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CalendarScreen(
    entries: List<MoodEntry>,
    onAddEntry: () -> Unit,
    onViewAllEntries: () -> Unit,
    modifier: Modifier = Modifier
) {
    var selectedDate by remember { mutableStateOf(LocalDate.now()) }
    var selectedEntry by remember { mutableStateOf<MoodEntry?>(null) }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        selectedDate.format(DateTimeFormatter.ofPattern("MMMM yyyy")),
                        style = MaterialTheme.typography.titleLarge,
                        fontWeight = FontWeight.Bold
                    ) 
                },
                navigationIcon = {
                    IconButton(onClick = { selectedDate = selectedDate.minusMonths(1) }) {
                        Icon(Icons.Filled.ArrowBack, contentDescription = "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü")
                    }
                },
                actions = {
                    IconButton(onClick = { selectedDate = selectedDate.plusMonths(1) }) {
                        Icon(Icons.Filled.ArrowForward, contentDescription = "–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü")
                    }
                    IconButton(onClick = onViewAllEntries) {
                        Icon(Icons.Filled.List, contentDescription = "–í—Å–µ –∑–∞–ø–∏—Å–∏")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.background
                )
            )
        },
        floatingActionButton = {
            FloatingActionButton(
                onClick = onAddEntry,
                containerColor = MaterialTheme.colorScheme.primary,
                contentColor = Color.White
            ) {
                Icon(Icons.Default.Add, contentDescription = "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
            }
        }
    ) { padding ->
        Column(
            modifier = modifier
                .fillMaxSize()
                .padding(padding)
                .background(MaterialTheme.colorScheme.background)
        ) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü",
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.primary
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        StatItem("–ó–∞–ø–∏—Å–µ–π", entries.size.toString())
                        StatItem("–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", 
                            when {
                                entries.map { it.moodLevel.ordinal }.average().isNaN() -> "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                entries.map { it.moodLevel.ordinal }.average() < 1.5 -> "üò´"
                                entries.map { it.moodLevel.ordinal }.average() < 2.5 -> "üòî"
                                entries.map { it.moodLevel.ordinal }.average() < 3.5 -> "üòê"
                                entries.map { it.moodLevel.ordinal }.average() < 4.5 -> "üôÇ"
                                else -> "üòä"
                            }
                        )
                    }
                    Spacer(modifier = Modifier.height(8.dp))
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        StatItem("–ß–∞—Å—Ç–∞—è —Ñ–∞–∑–∞", entries.groupBy { it.cyclePhase }.maxByOrNull { it.value.size }?.key?.toString() ?: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
                        StatItem("–ß–∞—Å—Ç—ã–π —Å–∏–º–ø—Ç–æ–º", entries.flatMap { it.symptoms }.groupBy { it }.maxByOrNull { it.value.size }?.key ?: "")
                    }
                }
            }

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                listOf("–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å").forEach { day ->
                    Text(
                        text = day,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.Center,
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                    )
                }
            }

            LazyVerticalGrid(
                columns = GridCells.Fixed(7),
                modifier = Modifier.fillMaxWidth()
            ) {
                items((1 until selectedDate.dayOfWeek.value).toList()) {
                    Box(modifier = Modifier.aspectRatio(1f))
                }

                items((1..selectedDate.lengthOfMonth()).toList()) { day ->
                    val date = selectedDate.withDayOfMonth(day)
                    val dayEntry = entries.find { it.date == date }
                    CalendarDay(
                        date = date,
                        entry = dayEntry,
                        isSelected = date == selectedDate,
                        onClick = { selectedEntry = dayEntry }
                    )
                }
            }
        }
    }

    selectedEntry?.let { entry ->
        DayDetailsDialog(
            date = selectedDate,
            entry = entry,
            onDismiss = { selectedEntry = null },
            onAddEntry = {
                selectedEntry = null
                onAddEntry()
            }
        )
    }
}

@Composable
private fun StatItem(label: String, value: String) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.labelMedium,
            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
        )
        Text(
            text = value,
            style = MaterialTheme.typography.titleMedium,
            color = MaterialTheme.colorScheme.onSurface
        )
    }
}

@Composable
fun CalendarDay(
    date: LocalDate,
    entry: MoodEntry?,
    isSelected: Boolean,
    onClick: () -> Unit
) {
    Box(
        modifier = Modifier
            .aspectRatio(1f)
            .padding(4.dp)
            .clip(CircleShape)
            .background(
                when {
                    isSelected -> MaterialTheme.colorScheme.primary
                    entry != null -> MaterialTheme.colorScheme.primary.copy(alpha = 0.1f)
                    else -> Color.Transparent
                }
            )
            .clickable(onClick = onClick),
        contentAlignment = Alignment.Center
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = date.dayOfMonth.toString(),
                style = MaterialTheme.typography.bodyMedium,
                color = when {
                    isSelected -> Color.White
                    else -> MaterialTheme.colorScheme.onSurface
                }
            )
            if (entry != null) {
                Text(
                    text = when (entry.moodLevel) {
                        MoodLevel.VERY_BAD -> "üò´"
                        MoodLevel.BAD -> "üòî"
                        MoodLevel.NEUTRAL -> "üòê"
                        MoodLevel.GOOD -> "üôÇ"
                        MoodLevel.EXCELLENT -> "üòä"
                    },
                    style = MaterialTheme.typography.bodySmall
                )
            }
        }
    }
}

@Composable
fun DayDetailsDialog(
    date: LocalDate,
    entry: MoodEntry?,
    onDismiss: () -> Unit,
    onAddEntry: () -> Unit
) {
    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            shape = RoundedCornerShape(16.dp),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = date.format(DateTimeFormatter.ofPattern("d MMMM yyyy")),
                    style = MaterialTheme.typography.titleLarge,
                    color = MaterialTheme.colorScheme.primary
                )
                
                Spacer(modifier = Modifier.height(16.dp))

                if (entry != null) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                            style = MaterialTheme.typography.titleMedium
                        )
                        Text(
                            when (entry.moodLevel) {
                                MoodLevel.VERY_BAD -> "üò´"
                                MoodLevel.BAD -> "üòî"
                                MoodLevel.NEUTRAL -> "üòê"
                                MoodLevel.GOOD -> "üôÇ"
                                MoodLevel.EXCELLENT -> "üòä"
                            },
                            style = MaterialTheme.typography.headlineMedium
                        )
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            "–§–∞–∑–∞ —Ü–∏–∫–ª–∞",
                            style = MaterialTheme.typography.titleMedium
                        )
                        Text(
                            when (entry.cyclePhase) {
                                CyclePhase.MENSTRUATION -> "–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è"
                                CyclePhase.FOLLICULAR -> "–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞"
                                CyclePhase.OVULATION -> "–û–≤—É–ª—è—Ü–∏—è"
                                CyclePhase.LUTEAL -> "–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞"
                                CyclePhase.PMS -> "–ü–ú–°"
                                CyclePhase.NONE -> "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
                            }
                        )
                    }

                    if (entry.symptoms.isNotEmpty()) {
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            "–°–∏–º–ø—Ç–æ–º—ã",
                            style = MaterialTheme.typography.titleMedium
                        )
                        entry.symptoms.forEach { symptom ->
                            Text(
                                "‚Ä¢ $symptom",
                                modifier = Modifier.padding(start = 8.dp, top = 4.dp)
                            )
                        }
                    }

                    if (entry.note.isNotEmpty()) {
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            "–ó–∞–º–µ—Ç–∫–∞",
                            style = MaterialTheme.typography.titleMedium
                        )
                        Text(entry.note)
                    }
                } else {
                    Text(
                        "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å",
                        style = MaterialTheme.typography.bodyLarge,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                    )
                }

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = onAddEntry,
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.primary,
                        contentColor = Color.White
                    ),
                    shape = RoundedCornerShape(16.dp)
                ) {
                    Text(
                        if (entry != null) "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" else "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
                        modifier = Modifier.padding(vertical = 8.dp)
                    )
                }
            }
        }
    }
}

data class MonthlyStats(
    val totalEntries: Int,
    val averageMood: Double,
    val mostCommonPhase: CyclePhase,
    val mostCommonSymptoms: String
) 